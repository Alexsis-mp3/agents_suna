name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
      - developer-branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: ${{ secrets.GCP_REGION }}
      BACKEND_SERVICE: suna-backend
      FRONTEND_SERVICE: suna-frontend
      BACKEND_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/suna-backend:latest
      FRONTEND_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/suna-frontend:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Create backend .env file from secrets
        run: |
          cat <<EOF > ./backend/.env
          ENV_MODE=production
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_PASSWORD=
          REDIS_SSL=false
          RABBITMQ_HOST=rabbitmq
          RABBITMQ_PORT=5672
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          MODEL_TO_USE=
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION_NAME=${{ secrets.AWS_REGION_NAME }}
          GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          RAPID_API_KEY=${{ secrets.RAPIDAPI_KEY }}
          TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}
          FIRECRAWL_API_KEY=${{ secrets.FIRECRAWL_API_KEY }}
          FIRECRAWL_URL=
          DAYTONA_API_KEY=${{ secrets.DAYTONA_API_KEY }}
          DAYTONA_SERVER_URL=
          DAYTONA_TARGET=
          LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}
          LANGFUSE_HOST=${{ secrets.LANGFUSE_HOST }}
          SMITHERY_API_KEY=${{ secrets.SMITHERY_API_KEY }}
          EOF

      - name: Create frontend .env.local file from secrets
        run: |
          cat <<EOF > ./frontend/.env.local
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          EOF

      - name: Build and push backend Docker image
        run: |
          docker build -t $BACKEND_IMAGE ./backend
          docker push $BACKEND_IMAGE

      - name: Build and push frontend Docker image
        run: |
          docker build -t $FRONTEND_IMAGE ./frontend
          docker push $FRONTEND_IMAGE

      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy $BACKEND_SERVICE \
            --image $BACKEND_IMAGE \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --set-env-vars $(cat ./backend/.env | grep -v '^#' | xargs)

      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy $FRONTEND_SERVICE \
            --image $FRONTEND_IMAGE \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --set-env-vars $(cat ./frontend/.env.local | grep -v '^#' | xargs)

# Required GitHub Secrets:
# - GCP_PROJECT_ID: Your Google Cloud project ID
# - GCP_REGION: Your Google Cloud region (e.g., us-central1)
# - GCP_SA_KEY: Service account key JSON with Cloud Run and Artifact Registry permissions
